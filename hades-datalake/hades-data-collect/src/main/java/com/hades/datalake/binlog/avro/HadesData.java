/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.hades.datalake.binlog.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HadesData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HadesData\",\"namespace\":\"com.hades.datalake.binlog.avro\",\"fields\":[{\"name\":\"messageid\",\"type\":\"long\"},{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"tablename\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"option\",\"type\":\"string\"},{\"name\":\"source\",\"type\":[{\"type\":\"map\",\"values\":[\"string\",\"null\"]},\"null\"]},{\"name\":\"current\",\"type\":[{\"type\":\"map\",\"values\":[\"string\",\"null\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long messageid;
  @Deprecated public java.lang.CharSequence database;
  @Deprecated public java.lang.CharSequence tablename;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.CharSequence option;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HadesData() {}

  /**
   * All-args constructor.
   */
  public HadesData(java.lang.Long messageid, java.lang.CharSequence database, java.lang.CharSequence tablename, java.lang.Long timestamp, java.lang.CharSequence option, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current) {
    this.messageid = messageid;
    this.database = database;
    this.tablename = tablename;
    this.timestamp = timestamp;
    this.option = option;
    this.source = source;
    this.current = current;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageid;
    case 1: return database;
    case 2: return tablename;
    case 3: return timestamp;
    case 4: return option;
    case 5: return source;
    case 6: return current;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageid = (java.lang.Long)value$; break;
    case 1: database = (java.lang.CharSequence)value$; break;
    case 2: tablename = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: option = (java.lang.CharSequence)value$; break;
    case 5: source = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 6: current = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'messageid' field.
   */
  public java.lang.Long getMessageid() {
    return messageid;
  }

  /**
   * Sets the value of the 'messageid' field.
   * @param value the value to set.
   */
  public void setMessageid(java.lang.Long value) {
    this.messageid = value;
  }

  /**
   * Gets the value of the 'database' field.
   */
  public java.lang.CharSequence getDatabase() {
    return database;
  }

  /**
   * Sets the value of the 'database' field.
   * @param value the value to set.
   */
  public void setDatabase(java.lang.CharSequence value) {
    this.database = value;
  }

  /**
   * Gets the value of the 'tablename' field.
   */
  public java.lang.CharSequence getTablename() {
    return tablename;
  }

  /**
   * Sets the value of the 'tablename' field.
   * @param value the value to set.
   */
  public void setTablename(java.lang.CharSequence value) {
    this.tablename = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'option' field.
   */
  public java.lang.CharSequence getOption() {
    return option;
  }

  /**
   * Sets the value of the 'option' field.
   * @param value the value to set.
   */
  public void setOption(java.lang.CharSequence value) {
    this.option = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'current' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCurrent() {
    return current;
  }

  /**
   * Sets the value of the 'current' field.
   * @param value the value to set.
   */
  public void setCurrent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.current = value;
  }

  /** Creates a new HadesData RecordBuilder */
  public static com.hades.datalake.binlog.avro.HadesData.Builder newBuilder() {
    return new com.hades.datalake.binlog.avro.HadesData.Builder();
  }
  
  /** Creates a new HadesData RecordBuilder by copying an existing Builder */
  public static com.hades.datalake.binlog.avro.HadesData.Builder newBuilder(com.hades.datalake.binlog.avro.HadesData.Builder other) {
    return new com.hades.datalake.binlog.avro.HadesData.Builder(other);
  }
  
  /** Creates a new HadesData RecordBuilder by copying an existing HadesData instance */
  public static com.hades.datalake.binlog.avro.HadesData.Builder newBuilder(com.hades.datalake.binlog.avro.HadesData other) {
    return new com.hades.datalake.binlog.avro.HadesData.Builder(other);
  }
  
  /**
   * RecordBuilder for HadesData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HadesData>
    implements org.apache.avro.data.RecordBuilder<HadesData> {

    private long messageid;
    private java.lang.CharSequence database;
    private java.lang.CharSequence tablename;
    private long timestamp;
    private java.lang.CharSequence option;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> source;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> current;

    /** Creates a new Builder */
    private Builder() {
      super(com.hades.datalake.binlog.avro.HadesData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.hades.datalake.binlog.avro.HadesData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageid)) {
        this.messageid = data().deepCopy(fields()[0].schema(), other.messageid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.database)) {
        this.database = data().deepCopy(fields()[1].schema(), other.database);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tablename)) {
        this.tablename = data().deepCopy(fields()[2].schema(), other.tablename);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.option)) {
        this.option = data().deepCopy(fields()[4].schema(), other.option);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.current)) {
        this.current = data().deepCopy(fields()[6].schema(), other.current);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HadesData instance */
    private Builder(com.hades.datalake.binlog.avro.HadesData other) {
            super(com.hades.datalake.binlog.avro.HadesData.SCHEMA$);
      if (isValidValue(fields()[0], other.messageid)) {
        this.messageid = data().deepCopy(fields()[0].schema(), other.messageid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.database)) {
        this.database = data().deepCopy(fields()[1].schema(), other.database);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tablename)) {
        this.tablename = data().deepCopy(fields()[2].schema(), other.tablename);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.option)) {
        this.option = data().deepCopy(fields()[4].schema(), other.option);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.current)) {
        this.current = data().deepCopy(fields()[6].schema(), other.current);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'messageid' field */
    public java.lang.Long getMessageid() {
      return messageid;
    }
    
    /** Sets the value of the 'messageid' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setMessageid(long value) {
      validate(fields()[0], value);
      this.messageid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'messageid' field has been set */
    public boolean hasMessageid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'messageid' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearMessageid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'database' field */
    public java.lang.CharSequence getDatabase() {
      return database;
    }
    
    /** Sets the value of the 'database' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setDatabase(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.database = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'database' field has been set */
    public boolean hasDatabase() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'database' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearDatabase() {
      database = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tablename' field */
    public java.lang.CharSequence getTablename() {
      return tablename;
    }
    
    /** Sets the value of the 'tablename' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setTablename(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tablename = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tablename' field has been set */
    public boolean hasTablename() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tablename' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearTablename() {
      tablename = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'option' field */
    public java.lang.CharSequence getOption() {
      return option;
    }
    
    /** Sets the value of the 'option' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setOption(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.option = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'option' field has been set */
    public boolean hasOption() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'option' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearOption() {
      option = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setSource(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.source = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'source' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearSource() {
      source = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'current' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getCurrent() {
      return current;
    }
    
    /** Sets the value of the 'current' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder setCurrent(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.current = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'current' field has been set */
    public boolean hasCurrent() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'current' field */
    public com.hades.datalake.binlog.avro.HadesData.Builder clearCurrent() {
      current = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public HadesData build() {
      try {
        HadesData record = new HadesData();
        record.messageid = fieldSetFlags()[0] ? this.messageid : (java.lang.Long) defaultValue(fields()[0]);
        record.database = fieldSetFlags()[1] ? this.database : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tablename = fieldSetFlags()[2] ? this.tablename : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.option = fieldSetFlags()[4] ? this.option : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.source = fieldSetFlags()[5] ? this.source : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[5]);
        record.current = fieldSetFlags()[6] ? this.current : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
